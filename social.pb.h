// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: social.proto

#ifndef PROTOBUF_social_2eproto__INCLUDED
#define PROTOBUF_social_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_social_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsUserImpl();
void InitDefaultsUser();
void InitDefaultsFollowRequestImpl();
void InitDefaultsFollowRequest();
void InitDefaultsFollowReplyImpl();
void InitDefaultsFollowReply();
void InitDefaultsPostImpl();
void InitDefaultsPost();
void InitDefaultsPostReplyImpl();
void InitDefaultsPostReply();
void InitDefaultsUnfollowRequestImpl();
void InitDefaultsUnfollowRequest();
void InitDefaultsUnfollowReplyImpl();
void InitDefaultsUnfollowReply();
void InitDefaultsTimelineRequestImpl();
void InitDefaultsTimelineRequest();
void InitDefaultsListRequestImpl();
void InitDefaultsListRequest();
void InitDefaultsListReplyImpl();
void InitDefaultsListReply();
void InitDefaultsSocialNetworkImpl();
void InitDefaultsSocialNetwork();
inline void InitDefaults() {
  InitDefaultsUser();
  InitDefaultsFollowRequest();
  InitDefaultsFollowReply();
  InitDefaultsPost();
  InitDefaultsPostReply();
  InitDefaultsUnfollowRequest();
  InitDefaultsUnfollowReply();
  InitDefaultsTimelineRequest();
  InitDefaultsListRequest();
  InitDefaultsListReply();
  InitDefaultsSocialNetwork();
}
}  // namespace protobuf_social_2eproto
namespace social {
class FollowReply;
class FollowReplyDefaultTypeInternal;
extern FollowReplyDefaultTypeInternal _FollowReply_default_instance_;
class FollowRequest;
class FollowRequestDefaultTypeInternal;
extern FollowRequestDefaultTypeInternal _FollowRequest_default_instance_;
class ListReply;
class ListReplyDefaultTypeInternal;
extern ListReplyDefaultTypeInternal _ListReply_default_instance_;
class ListRequest;
class ListRequestDefaultTypeInternal;
extern ListRequestDefaultTypeInternal _ListRequest_default_instance_;
class Post;
class PostDefaultTypeInternal;
extern PostDefaultTypeInternal _Post_default_instance_;
class PostReply;
class PostReplyDefaultTypeInternal;
extern PostReplyDefaultTypeInternal _PostReply_default_instance_;
class SocialNetwork;
class SocialNetworkDefaultTypeInternal;
extern SocialNetworkDefaultTypeInternal _SocialNetwork_default_instance_;
class TimelineRequest;
class TimelineRequestDefaultTypeInternal;
extern TimelineRequestDefaultTypeInternal _TimelineRequest_default_instance_;
class UnfollowReply;
class UnfollowReplyDefaultTypeInternal;
extern UnfollowReplyDefaultTypeInternal _UnfollowReply_default_instance_;
class UnfollowRequest;
class UnfollowRequestDefaultTypeInternal;
extern UnfollowRequestDefaultTypeInternal _UnfollowRequest_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace social
namespace social {

// ===================================================================

class User : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:social.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(User* other);
  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline User* New() const PROTOBUF_FINAL { return New(NULL); }

  User* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string following_users = 2;
  int following_users_size() const;
  void clear_following_users();
  static const int kFollowingUsersFieldNumber = 2;
  const ::std::string& following_users(int index) const;
  ::std::string* mutable_following_users(int index);
  void set_following_users(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_following_users(int index, ::std::string&& value);
  #endif
  void set_following_users(int index, const char* value);
  void set_following_users(int index, const char* value, size_t size);
  ::std::string* add_following_users();
  void add_following_users(const ::std::string& value);
  #if LANG_CXX11
  void add_following_users(::std::string&& value);
  #endif
  void add_following_users(const char* value);
  void add_following_users(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& following_users() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_following_users();

  // repeated .social.Post post = 4;
  int post_size() const;
  void clear_post();
  static const int kPostFieldNumber = 4;
  const ::social::Post& post(int index) const;
  ::social::Post* mutable_post(int index);
  ::social::Post* add_post();
  ::google::protobuf::RepeatedPtrField< ::social::Post >*
      mutable_post();
  const ::google::protobuf::RepeatedPtrField< ::social::Post >&
      post() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 num_followers = 3;
  void clear_num_followers();
  static const int kNumFollowersFieldNumber = 3;
  ::google::protobuf::int32 num_followers() const;
  void set_num_followers(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:social.User)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> following_users_;
  ::google::protobuf::RepeatedPtrField< ::social::Post > post_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 num_followers_;
  mutable int _cached_size_;
  friend struct ::protobuf_social_2eproto::TableStruct;
  friend void ::protobuf_social_2eproto::InitDefaultsUserImpl();
};
// -------------------------------------------------------------------

class FollowRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:social.FollowRequest) */ {
 public:
  FollowRequest();
  virtual ~FollowRequest();

  FollowRequest(const FollowRequest& from);

  inline FollowRequest& operator=(const FollowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FollowRequest(FollowRequest&& from) noexcept
    : FollowRequest() {
    *this = ::std::move(from);
  }

  inline FollowRequest& operator=(FollowRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FollowRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FollowRequest* internal_default_instance() {
    return reinterpret_cast<const FollowRequest*>(
               &_FollowRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(FollowRequest* other);
  friend void swap(FollowRequest& a, FollowRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FollowRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  FollowRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FollowRequest& from);
  void MergeFrom(const FollowRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FollowRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string to_follow = 2;
  void clear_to_follow();
  static const int kToFollowFieldNumber = 2;
  const ::std::string& to_follow() const;
  void set_to_follow(const ::std::string& value);
  #if LANG_CXX11
  void set_to_follow(::std::string&& value);
  #endif
  void set_to_follow(const char* value);
  void set_to_follow(const char* value, size_t size);
  ::std::string* mutable_to_follow();
  ::std::string* release_to_follow();
  void set_allocated_to_follow(::std::string* to_follow);

  // .social.User from_user = 1;
  bool has_from_user() const;
  void clear_from_user();
  static const int kFromUserFieldNumber = 1;
  const ::social::User& from_user() const;
  ::social::User* release_from_user();
  ::social::User* mutable_from_user();
  void set_allocated_from_user(::social::User* from_user);

  // @@protoc_insertion_point(class_scope:social.FollowRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr to_follow_;
  ::social::User* from_user_;
  mutable int _cached_size_;
  friend struct ::protobuf_social_2eproto::TableStruct;
  friend void ::protobuf_social_2eproto::InitDefaultsFollowRequestImpl();
};
// -------------------------------------------------------------------

class FollowReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:social.FollowReply) */ {
 public:
  FollowReply();
  virtual ~FollowReply();

  FollowReply(const FollowReply& from);

  inline FollowReply& operator=(const FollowReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FollowReply(FollowReply&& from) noexcept
    : FollowReply() {
    *this = ::std::move(from);
  }

  inline FollowReply& operator=(FollowReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FollowReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FollowReply* internal_default_instance() {
    return reinterpret_cast<const FollowReply*>(
               &_FollowReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(FollowReply* other);
  friend void swap(FollowReply& a, FollowReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FollowReply* New() const PROTOBUF_FINAL { return New(NULL); }

  FollowReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FollowReply& from);
  void MergeFrom(const FollowReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FollowReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // string reply = 2;
  void clear_reply();
  static const int kReplyFieldNumber = 2;
  const ::std::string& reply() const;
  void set_reply(const ::std::string& value);
  #if LANG_CXX11
  void set_reply(::std::string&& value);
  #endif
  void set_reply(const char* value);
  void set_reply(const char* value, size_t size);
  ::std::string* mutable_reply();
  ::std::string* release_reply();
  void set_allocated_reply(::std::string* reply);

  // @@protoc_insertion_point(class_scope:social.FollowReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::internal::ArenaStringPtr reply_;
  mutable int _cached_size_;
  friend struct ::protobuf_social_2eproto::TableStruct;
  friend void ::protobuf_social_2eproto::InitDefaultsFollowReplyImpl();
};
// -------------------------------------------------------------------

class Post : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:social.Post) */ {
 public:
  Post();
  virtual ~Post();

  Post(const Post& from);

  inline Post& operator=(const Post& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Post(Post&& from) noexcept
    : Post() {
    *this = ::std::move(from);
  }

  inline Post& operator=(Post&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Post& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Post* internal_default_instance() {
    return reinterpret_cast<const Post*>(
               &_Post_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Post* other);
  friend void swap(Post& a, Post& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Post* New() const PROTOBUF_FINAL { return New(NULL); }

  Post* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Post& from);
  void MergeFrom(const Post& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Post* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:social.Post)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable int _cached_size_;
  friend struct ::protobuf_social_2eproto::TableStruct;
  friend void ::protobuf_social_2eproto::InitDefaultsPostImpl();
};
// -------------------------------------------------------------------

class PostReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:social.PostReply) */ {
 public:
  PostReply();
  virtual ~PostReply();

  PostReply(const PostReply& from);

  inline PostReply& operator=(const PostReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PostReply(PostReply&& from) noexcept
    : PostReply() {
    *this = ::std::move(from);
  }

  inline PostReply& operator=(PostReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PostReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostReply* internal_default_instance() {
    return reinterpret_cast<const PostReply*>(
               &_PostReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PostReply* other);
  friend void swap(PostReply& a, PostReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PostReply* New() const PROTOBUF_FINAL { return New(NULL); }

  PostReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PostReply& from);
  void MergeFrom(const PostReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PostReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string author = 1;
  void clear_author();
  static const int kAuthorFieldNumber = 1;
  const ::std::string& author() const;
  void set_author(const ::std::string& value);
  #if LANG_CXX11
  void set_author(::std::string&& value);
  #endif
  void set_author(const char* value);
  void set_author(const char* value, size_t size);
  ::std::string* mutable_author();
  ::std::string* release_author();
  void set_allocated_author(::std::string* author);

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // string time_date = 3;
  void clear_time_date();
  static const int kTimeDateFieldNumber = 3;
  const ::std::string& time_date() const;
  void set_time_date(const ::std::string& value);
  #if LANG_CXX11
  void set_time_date(::std::string&& value);
  #endif
  void set_time_date(const char* value);
  void set_time_date(const char* value, size_t size);
  ::std::string* mutable_time_date();
  ::std::string* release_time_date();
  void set_allocated_time_date(::std::string* time_date);

  // @@protoc_insertion_point(class_scope:social.PostReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr author_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr time_date_;
  mutable int _cached_size_;
  friend struct ::protobuf_social_2eproto::TableStruct;
  friend void ::protobuf_social_2eproto::InitDefaultsPostReplyImpl();
};
// -------------------------------------------------------------------

class UnfollowRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:social.UnfollowRequest) */ {
 public:
  UnfollowRequest();
  virtual ~UnfollowRequest();

  UnfollowRequest(const UnfollowRequest& from);

  inline UnfollowRequest& operator=(const UnfollowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnfollowRequest(UnfollowRequest&& from) noexcept
    : UnfollowRequest() {
    *this = ::std::move(from);
  }

  inline UnfollowRequest& operator=(UnfollowRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnfollowRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnfollowRequest* internal_default_instance() {
    return reinterpret_cast<const UnfollowRequest*>(
               &_UnfollowRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(UnfollowRequest* other);
  friend void swap(UnfollowRequest& a, UnfollowRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnfollowRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UnfollowRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnfollowRequest& from);
  void MergeFrom(const UnfollowRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnfollowRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string to_unfollow = 2;
  void clear_to_unfollow();
  static const int kToUnfollowFieldNumber = 2;
  const ::std::string& to_unfollow() const;
  void set_to_unfollow(const ::std::string& value);
  #if LANG_CXX11
  void set_to_unfollow(::std::string&& value);
  #endif
  void set_to_unfollow(const char* value);
  void set_to_unfollow(const char* value, size_t size);
  ::std::string* mutable_to_unfollow();
  ::std::string* release_to_unfollow();
  void set_allocated_to_unfollow(::std::string* to_unfollow);

  // .social.User from_user = 1;
  bool has_from_user() const;
  void clear_from_user();
  static const int kFromUserFieldNumber = 1;
  const ::social::User& from_user() const;
  ::social::User* release_from_user();
  ::social::User* mutable_from_user();
  void set_allocated_from_user(::social::User* from_user);

  // @@protoc_insertion_point(class_scope:social.UnfollowRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr to_unfollow_;
  ::social::User* from_user_;
  mutable int _cached_size_;
  friend struct ::protobuf_social_2eproto::TableStruct;
  friend void ::protobuf_social_2eproto::InitDefaultsUnfollowRequestImpl();
};
// -------------------------------------------------------------------

class UnfollowReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:social.UnfollowReply) */ {
 public:
  UnfollowReply();
  virtual ~UnfollowReply();

  UnfollowReply(const UnfollowReply& from);

  inline UnfollowReply& operator=(const UnfollowReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnfollowReply(UnfollowReply&& from) noexcept
    : UnfollowReply() {
    *this = ::std::move(from);
  }

  inline UnfollowReply& operator=(UnfollowReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnfollowReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnfollowReply* internal_default_instance() {
    return reinterpret_cast<const UnfollowReply*>(
               &_UnfollowReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(UnfollowReply* other);
  friend void swap(UnfollowReply& a, UnfollowReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnfollowReply* New() const PROTOBUF_FINAL { return New(NULL); }

  UnfollowReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnfollowReply& from);
  void MergeFrom(const UnfollowReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnfollowReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // string reply = 2;
  void clear_reply();
  static const int kReplyFieldNumber = 2;
  const ::std::string& reply() const;
  void set_reply(const ::std::string& value);
  #if LANG_CXX11
  void set_reply(::std::string&& value);
  #endif
  void set_reply(const char* value);
  void set_reply(const char* value, size_t size);
  ::std::string* mutable_reply();
  ::std::string* release_reply();
  void set_allocated_reply(::std::string* reply);

  // @@protoc_insertion_point(class_scope:social.UnfollowReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::internal::ArenaStringPtr reply_;
  mutable int _cached_size_;
  friend struct ::protobuf_social_2eproto::TableStruct;
  friend void ::protobuf_social_2eproto::InitDefaultsUnfollowReplyImpl();
};
// -------------------------------------------------------------------

class TimelineRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:social.TimelineRequest) */ {
 public:
  TimelineRequest();
  virtual ~TimelineRequest();

  TimelineRequest(const TimelineRequest& from);

  inline TimelineRequest& operator=(const TimelineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimelineRequest(TimelineRequest&& from) noexcept
    : TimelineRequest() {
    *this = ::std::move(from);
  }

  inline TimelineRequest& operator=(TimelineRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TimelineRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimelineRequest* internal_default_instance() {
    return reinterpret_cast<const TimelineRequest*>(
               &_TimelineRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(TimelineRequest* other);
  friend void swap(TimelineRequest& a, TimelineRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimelineRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  TimelineRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TimelineRequest& from);
  void MergeFrom(const TimelineRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TimelineRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .social.User user = 1;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::social::User& user() const;
  ::social::User* release_user();
  ::social::User* mutable_user();
  void set_allocated_user(::social::User* user);

  // @@protoc_insertion_point(class_scope:social.TimelineRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::social::User* user_;
  mutable int _cached_size_;
  friend struct ::protobuf_social_2eproto::TableStruct;
  friend void ::protobuf_social_2eproto::InitDefaultsTimelineRequestImpl();
};
// -------------------------------------------------------------------

class ListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:social.ListRequest) */ {
 public:
  ListRequest();
  virtual ~ListRequest();

  ListRequest(const ListRequest& from);

  inline ListRequest& operator=(const ListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListRequest(ListRequest&& from) noexcept
    : ListRequest() {
    *this = ::std::move(from);
  }

  inline ListRequest& operator=(ListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListRequest* internal_default_instance() {
    return reinterpret_cast<const ListRequest*>(
               &_ListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(ListRequest* other);
  friend void swap(ListRequest& a, ListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListRequest& from);
  void MergeFrom(const ListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .social.User from_user = 1;
  bool has_from_user() const;
  void clear_from_user();
  static const int kFromUserFieldNumber = 1;
  const ::social::User& from_user() const;
  ::social::User* release_from_user();
  ::social::User* mutable_from_user();
  void set_allocated_from_user(::social::User* from_user);

  // @@protoc_insertion_point(class_scope:social.ListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::social::User* from_user_;
  mutable int _cached_size_;
  friend struct ::protobuf_social_2eproto::TableStruct;
  friend void ::protobuf_social_2eproto::InitDefaultsListRequestImpl();
};
// -------------------------------------------------------------------

class ListReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:social.ListReply) */ {
 public:
  ListReply();
  virtual ~ListReply();

  ListReply(const ListReply& from);

  inline ListReply& operator=(const ListReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListReply(ListReply&& from) noexcept
    : ListReply() {
    *this = ::std::move(from);
  }

  inline ListReply& operator=(ListReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListReply* internal_default_instance() {
    return reinterpret_cast<const ListReply*>(
               &_ListReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(ListReply* other);
  friend void swap(ListReply& a, ListReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListReply* New() const PROTOBUF_FINAL { return New(NULL); }

  ListReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListReply& from);
  void MergeFrom(const ListReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string following_users = 1;
  void clear_following_users();
  static const int kFollowingUsersFieldNumber = 1;
  const ::std::string& following_users() const;
  void set_following_users(const ::std::string& value);
  #if LANG_CXX11
  void set_following_users(::std::string&& value);
  #endif
  void set_following_users(const char* value);
  void set_following_users(const char* value, size_t size);
  ::std::string* mutable_following_users();
  ::std::string* release_following_users();
  void set_allocated_following_users(::std::string* following_users);

  // string network_users = 2;
  void clear_network_users();
  static const int kNetworkUsersFieldNumber = 2;
  const ::std::string& network_users() const;
  void set_network_users(const ::std::string& value);
  #if LANG_CXX11
  void set_network_users(::std::string&& value);
  #endif
  void set_network_users(const char* value);
  void set_network_users(const char* value, size_t size);
  ::std::string* mutable_network_users();
  ::std::string* release_network_users();
  void set_allocated_network_users(::std::string* network_users);

  // @@protoc_insertion_point(class_scope:social.ListReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr following_users_;
  ::google::protobuf::internal::ArenaStringPtr network_users_;
  mutable int _cached_size_;
  friend struct ::protobuf_social_2eproto::TableStruct;
  friend void ::protobuf_social_2eproto::InitDefaultsListReplyImpl();
};
// -------------------------------------------------------------------

class SocialNetwork : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:social.SocialNetwork) */ {
 public:
  SocialNetwork();
  virtual ~SocialNetwork();

  SocialNetwork(const SocialNetwork& from);

  inline SocialNetwork& operator=(const SocialNetwork& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SocialNetwork(SocialNetwork&& from) noexcept
    : SocialNetwork() {
    *this = ::std::move(from);
  }

  inline SocialNetwork& operator=(SocialNetwork&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SocialNetwork& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SocialNetwork* internal_default_instance() {
    return reinterpret_cast<const SocialNetwork*>(
               &_SocialNetwork_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(SocialNetwork* other);
  friend void swap(SocialNetwork& a, SocialNetwork& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SocialNetwork* New() const PROTOBUF_FINAL { return New(NULL); }

  SocialNetwork* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SocialNetwork& from);
  void MergeFrom(const SocialNetwork& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SocialNetwork* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .social.User user = 1;
  int user_size() const;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::social::User& user(int index) const;
  ::social::User* mutable_user(int index);
  ::social::User* add_user();
  ::google::protobuf::RepeatedPtrField< ::social::User >*
      mutable_user();
  const ::google::protobuf::RepeatedPtrField< ::social::User >&
      user() const;

  // @@protoc_insertion_point(class_scope:social.SocialNetwork)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::social::User > user_;
  mutable int _cached_size_;
  friend struct ::protobuf_social_2eproto::TableStruct;
  friend void ::protobuf_social_2eproto::InitDefaultsSocialNetworkImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User

// string name = 1;
inline void User::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::name() const {
  // @@protoc_insertion_point(field_get:social.User.name)
  return name_.GetNoArena();
}
inline void User::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:social.User.name)
}
#if LANG_CXX11
inline void User::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:social.User.name)
}
#endif
inline void User::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:social.User.name)
}
inline void User::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:social.User.name)
}
inline ::std::string* User::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:social.User.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:social.User.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:social.User.name)
}

// repeated string following_users = 2;
inline int User::following_users_size() const {
  return following_users_.size();
}
inline void User::clear_following_users() {
  following_users_.Clear();
}
inline const ::std::string& User::following_users(int index) const {
  // @@protoc_insertion_point(field_get:social.User.following_users)
  return following_users_.Get(index);
}
inline ::std::string* User::mutable_following_users(int index) {
  // @@protoc_insertion_point(field_mutable:social.User.following_users)
  return following_users_.Mutable(index);
}
inline void User::set_following_users(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:social.User.following_users)
  following_users_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void User::set_following_users(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:social.User.following_users)
  following_users_.Mutable(index)->assign(std::move(value));
}
#endif
inline void User::set_following_users(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  following_users_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:social.User.following_users)
}
inline void User::set_following_users(int index, const char* value, size_t size) {
  following_users_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:social.User.following_users)
}
inline ::std::string* User::add_following_users() {
  // @@protoc_insertion_point(field_add_mutable:social.User.following_users)
  return following_users_.Add();
}
inline void User::add_following_users(const ::std::string& value) {
  following_users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:social.User.following_users)
}
#if LANG_CXX11
inline void User::add_following_users(::std::string&& value) {
  following_users_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:social.User.following_users)
}
#endif
inline void User::add_following_users(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  following_users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:social.User.following_users)
}
inline void User::add_following_users(const char* value, size_t size) {
  following_users_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:social.User.following_users)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
User::following_users() const {
  // @@protoc_insertion_point(field_list:social.User.following_users)
  return following_users_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
User::mutable_following_users() {
  // @@protoc_insertion_point(field_mutable_list:social.User.following_users)
  return &following_users_;
}

// int32 num_followers = 3;
inline void User::clear_num_followers() {
  num_followers_ = 0;
}
inline ::google::protobuf::int32 User::num_followers() const {
  // @@protoc_insertion_point(field_get:social.User.num_followers)
  return num_followers_;
}
inline void User::set_num_followers(::google::protobuf::int32 value) {
  
  num_followers_ = value;
  // @@protoc_insertion_point(field_set:social.User.num_followers)
}

// repeated .social.Post post = 4;
inline int User::post_size() const {
  return post_.size();
}
inline void User::clear_post() {
  post_.Clear();
}
inline const ::social::Post& User::post(int index) const {
  // @@protoc_insertion_point(field_get:social.User.post)
  return post_.Get(index);
}
inline ::social::Post* User::mutable_post(int index) {
  // @@protoc_insertion_point(field_mutable:social.User.post)
  return post_.Mutable(index);
}
inline ::social::Post* User::add_post() {
  // @@protoc_insertion_point(field_add:social.User.post)
  return post_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::social::Post >*
User::mutable_post() {
  // @@protoc_insertion_point(field_mutable_list:social.User.post)
  return &post_;
}
inline const ::google::protobuf::RepeatedPtrField< ::social::Post >&
User::post() const {
  // @@protoc_insertion_point(field_list:social.User.post)
  return post_;
}

// -------------------------------------------------------------------

// FollowRequest

// .social.User from_user = 1;
inline bool FollowRequest::has_from_user() const {
  return this != internal_default_instance() && from_user_ != NULL;
}
inline void FollowRequest::clear_from_user() {
  if (GetArenaNoVirtual() == NULL && from_user_ != NULL) {
    delete from_user_;
  }
  from_user_ = NULL;
}
inline const ::social::User& FollowRequest::from_user() const {
  const ::social::User* p = from_user_;
  // @@protoc_insertion_point(field_get:social.FollowRequest.from_user)
  return p != NULL ? *p : *reinterpret_cast<const ::social::User*>(
      &::social::_User_default_instance_);
}
inline ::social::User* FollowRequest::release_from_user() {
  // @@protoc_insertion_point(field_release:social.FollowRequest.from_user)
  
  ::social::User* temp = from_user_;
  from_user_ = NULL;
  return temp;
}
inline ::social::User* FollowRequest::mutable_from_user() {
  
  if (from_user_ == NULL) {
    from_user_ = new ::social::User;
  }
  // @@protoc_insertion_point(field_mutable:social.FollowRequest.from_user)
  return from_user_;
}
inline void FollowRequest::set_allocated_from_user(::social::User* from_user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete from_user_;
  }
  if (from_user) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      from_user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, from_user, submessage_arena);
    }
    
  } else {
    
  }
  from_user_ = from_user;
  // @@protoc_insertion_point(field_set_allocated:social.FollowRequest.from_user)
}

// string to_follow = 2;
inline void FollowRequest::clear_to_follow() {
  to_follow_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FollowRequest::to_follow() const {
  // @@protoc_insertion_point(field_get:social.FollowRequest.to_follow)
  return to_follow_.GetNoArena();
}
inline void FollowRequest::set_to_follow(const ::std::string& value) {
  
  to_follow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:social.FollowRequest.to_follow)
}
#if LANG_CXX11
inline void FollowRequest::set_to_follow(::std::string&& value) {
  
  to_follow_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:social.FollowRequest.to_follow)
}
#endif
inline void FollowRequest::set_to_follow(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_follow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:social.FollowRequest.to_follow)
}
inline void FollowRequest::set_to_follow(const char* value, size_t size) {
  
  to_follow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:social.FollowRequest.to_follow)
}
inline ::std::string* FollowRequest::mutable_to_follow() {
  
  // @@protoc_insertion_point(field_mutable:social.FollowRequest.to_follow)
  return to_follow_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FollowRequest::release_to_follow() {
  // @@protoc_insertion_point(field_release:social.FollowRequest.to_follow)
  
  return to_follow_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FollowRequest::set_allocated_to_follow(::std::string* to_follow) {
  if (to_follow != NULL) {
    
  } else {
    
  }
  to_follow_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_follow);
  // @@protoc_insertion_point(field_set_allocated:social.FollowRequest.to_follow)
}

// -------------------------------------------------------------------

// FollowReply

// string status = 1;
inline void FollowReply::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FollowReply::status() const {
  // @@protoc_insertion_point(field_get:social.FollowReply.status)
  return status_.GetNoArena();
}
inline void FollowReply::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:social.FollowReply.status)
}
#if LANG_CXX11
inline void FollowReply::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:social.FollowReply.status)
}
#endif
inline void FollowReply::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:social.FollowReply.status)
}
inline void FollowReply::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:social.FollowReply.status)
}
inline ::std::string* FollowReply::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:social.FollowReply.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FollowReply::release_status() {
  // @@protoc_insertion_point(field_release:social.FollowReply.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FollowReply::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:social.FollowReply.status)
}

// string reply = 2;
inline void FollowReply::clear_reply() {
  reply_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FollowReply::reply() const {
  // @@protoc_insertion_point(field_get:social.FollowReply.reply)
  return reply_.GetNoArena();
}
inline void FollowReply::set_reply(const ::std::string& value) {
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:social.FollowReply.reply)
}
#if LANG_CXX11
inline void FollowReply::set_reply(::std::string&& value) {
  
  reply_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:social.FollowReply.reply)
}
#endif
inline void FollowReply::set_reply(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:social.FollowReply.reply)
}
inline void FollowReply::set_reply(const char* value, size_t size) {
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:social.FollowReply.reply)
}
inline ::std::string* FollowReply::mutable_reply() {
  
  // @@protoc_insertion_point(field_mutable:social.FollowReply.reply)
  return reply_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FollowReply::release_reply() {
  // @@protoc_insertion_point(field_release:social.FollowReply.reply)
  
  return reply_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FollowReply::set_allocated_reply(::std::string* reply) {
  if (reply != NULL) {
    
  } else {
    
  }
  reply_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reply);
  // @@protoc_insertion_point(field_set_allocated:social.FollowReply.reply)
}

// -------------------------------------------------------------------

// Post

// string message = 1;
inline void Post::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Post::message() const {
  // @@protoc_insertion_point(field_get:social.Post.message)
  return message_.GetNoArena();
}
inline void Post::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:social.Post.message)
}
#if LANG_CXX11
inline void Post::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:social.Post.message)
}
#endif
inline void Post::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:social.Post.message)
}
inline void Post::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:social.Post.message)
}
inline ::std::string* Post::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:social.Post.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Post::release_message() {
  // @@protoc_insertion_point(field_release:social.Post.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Post::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:social.Post.message)
}

// -------------------------------------------------------------------

// PostReply

// string author = 1;
inline void PostReply::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PostReply::author() const {
  // @@protoc_insertion_point(field_get:social.PostReply.author)
  return author_.GetNoArena();
}
inline void PostReply::set_author(const ::std::string& value) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:social.PostReply.author)
}
#if LANG_CXX11
inline void PostReply::set_author(::std::string&& value) {
  
  author_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:social.PostReply.author)
}
#endif
inline void PostReply::set_author(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:social.PostReply.author)
}
inline void PostReply::set_author(const char* value, size_t size) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:social.PostReply.author)
}
inline ::std::string* PostReply::mutable_author() {
  
  // @@protoc_insertion_point(field_mutable:social.PostReply.author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PostReply::release_author() {
  // @@protoc_insertion_point(field_release:social.PostReply.author)
  
  return author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PostReply::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    
  } else {
    
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:social.PostReply.author)
}

// string message = 2;
inline void PostReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PostReply::message() const {
  // @@protoc_insertion_point(field_get:social.PostReply.message)
  return message_.GetNoArena();
}
inline void PostReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:social.PostReply.message)
}
#if LANG_CXX11
inline void PostReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:social.PostReply.message)
}
#endif
inline void PostReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:social.PostReply.message)
}
inline void PostReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:social.PostReply.message)
}
inline ::std::string* PostReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:social.PostReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PostReply::release_message() {
  // @@protoc_insertion_point(field_release:social.PostReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PostReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:social.PostReply.message)
}

// string time_date = 3;
inline void PostReply::clear_time_date() {
  time_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PostReply::time_date() const {
  // @@protoc_insertion_point(field_get:social.PostReply.time_date)
  return time_date_.GetNoArena();
}
inline void PostReply::set_time_date(const ::std::string& value) {
  
  time_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:social.PostReply.time_date)
}
#if LANG_CXX11
inline void PostReply::set_time_date(::std::string&& value) {
  
  time_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:social.PostReply.time_date)
}
#endif
inline void PostReply::set_time_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  time_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:social.PostReply.time_date)
}
inline void PostReply::set_time_date(const char* value, size_t size) {
  
  time_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:social.PostReply.time_date)
}
inline ::std::string* PostReply::mutable_time_date() {
  
  // @@protoc_insertion_point(field_mutable:social.PostReply.time_date)
  return time_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PostReply::release_time_date() {
  // @@protoc_insertion_point(field_release:social.PostReply.time_date)
  
  return time_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PostReply::set_allocated_time_date(::std::string* time_date) {
  if (time_date != NULL) {
    
  } else {
    
  }
  time_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time_date);
  // @@protoc_insertion_point(field_set_allocated:social.PostReply.time_date)
}

// -------------------------------------------------------------------

// UnfollowRequest

// .social.User from_user = 1;
inline bool UnfollowRequest::has_from_user() const {
  return this != internal_default_instance() && from_user_ != NULL;
}
inline void UnfollowRequest::clear_from_user() {
  if (GetArenaNoVirtual() == NULL && from_user_ != NULL) {
    delete from_user_;
  }
  from_user_ = NULL;
}
inline const ::social::User& UnfollowRequest::from_user() const {
  const ::social::User* p = from_user_;
  // @@protoc_insertion_point(field_get:social.UnfollowRequest.from_user)
  return p != NULL ? *p : *reinterpret_cast<const ::social::User*>(
      &::social::_User_default_instance_);
}
inline ::social::User* UnfollowRequest::release_from_user() {
  // @@protoc_insertion_point(field_release:social.UnfollowRequest.from_user)
  
  ::social::User* temp = from_user_;
  from_user_ = NULL;
  return temp;
}
inline ::social::User* UnfollowRequest::mutable_from_user() {
  
  if (from_user_ == NULL) {
    from_user_ = new ::social::User;
  }
  // @@protoc_insertion_point(field_mutable:social.UnfollowRequest.from_user)
  return from_user_;
}
inline void UnfollowRequest::set_allocated_from_user(::social::User* from_user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete from_user_;
  }
  if (from_user) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      from_user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, from_user, submessage_arena);
    }
    
  } else {
    
  }
  from_user_ = from_user;
  // @@protoc_insertion_point(field_set_allocated:social.UnfollowRequest.from_user)
}

// string to_unfollow = 2;
inline void UnfollowRequest::clear_to_unfollow() {
  to_unfollow_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnfollowRequest::to_unfollow() const {
  // @@protoc_insertion_point(field_get:social.UnfollowRequest.to_unfollow)
  return to_unfollow_.GetNoArena();
}
inline void UnfollowRequest::set_to_unfollow(const ::std::string& value) {
  
  to_unfollow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:social.UnfollowRequest.to_unfollow)
}
#if LANG_CXX11
inline void UnfollowRequest::set_to_unfollow(::std::string&& value) {
  
  to_unfollow_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:social.UnfollowRequest.to_unfollow)
}
#endif
inline void UnfollowRequest::set_to_unfollow(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_unfollow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:social.UnfollowRequest.to_unfollow)
}
inline void UnfollowRequest::set_to_unfollow(const char* value, size_t size) {
  
  to_unfollow_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:social.UnfollowRequest.to_unfollow)
}
inline ::std::string* UnfollowRequest::mutable_to_unfollow() {
  
  // @@protoc_insertion_point(field_mutable:social.UnfollowRequest.to_unfollow)
  return to_unfollow_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnfollowRequest::release_to_unfollow() {
  // @@protoc_insertion_point(field_release:social.UnfollowRequest.to_unfollow)
  
  return to_unfollow_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnfollowRequest::set_allocated_to_unfollow(::std::string* to_unfollow) {
  if (to_unfollow != NULL) {
    
  } else {
    
  }
  to_unfollow_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to_unfollow);
  // @@protoc_insertion_point(field_set_allocated:social.UnfollowRequest.to_unfollow)
}

// -------------------------------------------------------------------

// UnfollowReply

// string status = 1;
inline void UnfollowReply::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnfollowReply::status() const {
  // @@protoc_insertion_point(field_get:social.UnfollowReply.status)
  return status_.GetNoArena();
}
inline void UnfollowReply::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:social.UnfollowReply.status)
}
#if LANG_CXX11
inline void UnfollowReply::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:social.UnfollowReply.status)
}
#endif
inline void UnfollowReply::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:social.UnfollowReply.status)
}
inline void UnfollowReply::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:social.UnfollowReply.status)
}
inline ::std::string* UnfollowReply::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:social.UnfollowReply.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnfollowReply::release_status() {
  // @@protoc_insertion_point(field_release:social.UnfollowReply.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnfollowReply::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:social.UnfollowReply.status)
}

// string reply = 2;
inline void UnfollowReply::clear_reply() {
  reply_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnfollowReply::reply() const {
  // @@protoc_insertion_point(field_get:social.UnfollowReply.reply)
  return reply_.GetNoArena();
}
inline void UnfollowReply::set_reply(const ::std::string& value) {
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:social.UnfollowReply.reply)
}
#if LANG_CXX11
inline void UnfollowReply::set_reply(::std::string&& value) {
  
  reply_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:social.UnfollowReply.reply)
}
#endif
inline void UnfollowReply::set_reply(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:social.UnfollowReply.reply)
}
inline void UnfollowReply::set_reply(const char* value, size_t size) {
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:social.UnfollowReply.reply)
}
inline ::std::string* UnfollowReply::mutable_reply() {
  
  // @@protoc_insertion_point(field_mutable:social.UnfollowReply.reply)
  return reply_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnfollowReply::release_reply() {
  // @@protoc_insertion_point(field_release:social.UnfollowReply.reply)
  
  return reply_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnfollowReply::set_allocated_reply(::std::string* reply) {
  if (reply != NULL) {
    
  } else {
    
  }
  reply_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reply);
  // @@protoc_insertion_point(field_set_allocated:social.UnfollowReply.reply)
}

// -------------------------------------------------------------------

// TimelineRequest

// .social.User user = 1;
inline bool TimelineRequest::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
inline void TimelineRequest::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
}
inline const ::social::User& TimelineRequest::user() const {
  const ::social::User* p = user_;
  // @@protoc_insertion_point(field_get:social.TimelineRequest.user)
  return p != NULL ? *p : *reinterpret_cast<const ::social::User*>(
      &::social::_User_default_instance_);
}
inline ::social::User* TimelineRequest::release_user() {
  // @@protoc_insertion_point(field_release:social.TimelineRequest.user)
  
  ::social::User* temp = user_;
  user_ = NULL;
  return temp;
}
inline ::social::User* TimelineRequest::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::social::User;
  }
  // @@protoc_insertion_point(field_mutable:social.TimelineRequest.user)
  return user_;
}
inline void TimelineRequest::set_allocated_user(::social::User* user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_;
  }
  if (user) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:social.TimelineRequest.user)
}

// -------------------------------------------------------------------

// ListRequest

// .social.User from_user = 1;
inline bool ListRequest::has_from_user() const {
  return this != internal_default_instance() && from_user_ != NULL;
}
inline void ListRequest::clear_from_user() {
  if (GetArenaNoVirtual() == NULL && from_user_ != NULL) {
    delete from_user_;
  }
  from_user_ = NULL;
}
inline const ::social::User& ListRequest::from_user() const {
  const ::social::User* p = from_user_;
  // @@protoc_insertion_point(field_get:social.ListRequest.from_user)
  return p != NULL ? *p : *reinterpret_cast<const ::social::User*>(
      &::social::_User_default_instance_);
}
inline ::social::User* ListRequest::release_from_user() {
  // @@protoc_insertion_point(field_release:social.ListRequest.from_user)
  
  ::social::User* temp = from_user_;
  from_user_ = NULL;
  return temp;
}
inline ::social::User* ListRequest::mutable_from_user() {
  
  if (from_user_ == NULL) {
    from_user_ = new ::social::User;
  }
  // @@protoc_insertion_point(field_mutable:social.ListRequest.from_user)
  return from_user_;
}
inline void ListRequest::set_allocated_from_user(::social::User* from_user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete from_user_;
  }
  if (from_user) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      from_user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, from_user, submessage_arena);
    }
    
  } else {
    
  }
  from_user_ = from_user;
  // @@protoc_insertion_point(field_set_allocated:social.ListRequest.from_user)
}

// -------------------------------------------------------------------

// ListReply

// string following_users = 1;
inline void ListReply::clear_following_users() {
  following_users_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListReply::following_users() const {
  // @@protoc_insertion_point(field_get:social.ListReply.following_users)
  return following_users_.GetNoArena();
}
inline void ListReply::set_following_users(const ::std::string& value) {
  
  following_users_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:social.ListReply.following_users)
}
#if LANG_CXX11
inline void ListReply::set_following_users(::std::string&& value) {
  
  following_users_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:social.ListReply.following_users)
}
#endif
inline void ListReply::set_following_users(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  following_users_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:social.ListReply.following_users)
}
inline void ListReply::set_following_users(const char* value, size_t size) {
  
  following_users_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:social.ListReply.following_users)
}
inline ::std::string* ListReply::mutable_following_users() {
  
  // @@protoc_insertion_point(field_mutable:social.ListReply.following_users)
  return following_users_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListReply::release_following_users() {
  // @@protoc_insertion_point(field_release:social.ListReply.following_users)
  
  return following_users_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListReply::set_allocated_following_users(::std::string* following_users) {
  if (following_users != NULL) {
    
  } else {
    
  }
  following_users_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), following_users);
  // @@protoc_insertion_point(field_set_allocated:social.ListReply.following_users)
}

// string network_users = 2;
inline void ListReply::clear_network_users() {
  network_users_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListReply::network_users() const {
  // @@protoc_insertion_point(field_get:social.ListReply.network_users)
  return network_users_.GetNoArena();
}
inline void ListReply::set_network_users(const ::std::string& value) {
  
  network_users_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:social.ListReply.network_users)
}
#if LANG_CXX11
inline void ListReply::set_network_users(::std::string&& value) {
  
  network_users_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:social.ListReply.network_users)
}
#endif
inline void ListReply::set_network_users(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  network_users_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:social.ListReply.network_users)
}
inline void ListReply::set_network_users(const char* value, size_t size) {
  
  network_users_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:social.ListReply.network_users)
}
inline ::std::string* ListReply::mutable_network_users() {
  
  // @@protoc_insertion_point(field_mutable:social.ListReply.network_users)
  return network_users_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListReply::release_network_users() {
  // @@protoc_insertion_point(field_release:social.ListReply.network_users)
  
  return network_users_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListReply::set_allocated_network_users(::std::string* network_users) {
  if (network_users != NULL) {
    
  } else {
    
  }
  network_users_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network_users);
  // @@protoc_insertion_point(field_set_allocated:social.ListReply.network_users)
}

// -------------------------------------------------------------------

// SocialNetwork

// repeated .social.User user = 1;
inline int SocialNetwork::user_size() const {
  return user_.size();
}
inline void SocialNetwork::clear_user() {
  user_.Clear();
}
inline const ::social::User& SocialNetwork::user(int index) const {
  // @@protoc_insertion_point(field_get:social.SocialNetwork.user)
  return user_.Get(index);
}
inline ::social::User* SocialNetwork::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:social.SocialNetwork.user)
  return user_.Mutable(index);
}
inline ::social::User* SocialNetwork::add_user() {
  // @@protoc_insertion_point(field_add:social.SocialNetwork.user)
  return user_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::social::User >*
SocialNetwork::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:social.SocialNetwork.user)
  return &user_;
}
inline const ::google::protobuf::RepeatedPtrField< ::social::User >&
SocialNetwork::user() const {
  // @@protoc_insertion_point(field_list:social.SocialNetwork.user)
  return user_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace social

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_social_2eproto__INCLUDED
