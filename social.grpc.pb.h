// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: social.proto
#ifndef GRPC_social_2eproto__INCLUDED
#define GRPC_social_2eproto__INCLUDED

#include "social.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace social {

// Interface exported by the server.
class Social final {
 public:
  static constexpr char const* service_full_name() {
    return "social.Social";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Accepts a FollowRequest and returns a  Reply
    virtual ::grpc::Status Follow(::grpc::ClientContext* context, const ::social::FollowRequest& request, ::social::FollowReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::social::FollowReply>> AsyncFollow(::grpc::ClientContext* context, const ::social::FollowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::social::FollowReply>>(AsyncFollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::social::FollowReply>> PrepareAsyncFollow(::grpc::ClientContext* context, const ::social::FollowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::social::FollowReply>>(PrepareAsyncFollowRaw(context, request, cq));
    }
    // Accepts a UnfollowRequest and returns a Reply
    virtual ::grpc::Status Unfollow(::grpc::ClientContext* context, const ::social::UnfollowRequest& request, ::social::UnfollowReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::social::UnfollowReply>> AsyncUnfollow(::grpc::ClientContext* context, const ::social::UnfollowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::social::UnfollowReply>>(AsyncUnfollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::social::UnfollowReply>> PrepareAsyncUnfollow(::grpc::ClientContext* context, const ::social::UnfollowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::social::UnfollowReply>>(PrepareAsyncUnfollowRaw(context, request, cq));
    }
    // Bidirectional stream of posts and replies.
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::social::Post, ::social::PostReply>> Timeline(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::social::Post, ::social::PostReply>>(TimelineRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::social::Post, ::social::PostReply>> AsyncTimeline(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::social::Post, ::social::PostReply>>(AsyncTimelineRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::social::Post, ::social::PostReply>> PrepareAsyncTimeline(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::social::Post, ::social::PostReply>>(PrepareAsyncTimelineRaw(context, cq));
    }
    virtual ::grpc::Status List(::grpc::ClientContext* context, const ::social::ListRequest& request, ::social::ListReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::social::ListReply>> AsyncList(::grpc::ClientContext* context, const ::social::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::social::ListReply>>(AsyncListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::social::ListReply>> PrepareAsyncList(::grpc::ClientContext* context, const ::social::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::social::ListReply>>(PrepareAsyncListRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::social::FollowReply>* AsyncFollowRaw(::grpc::ClientContext* context, const ::social::FollowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::social::FollowReply>* PrepareAsyncFollowRaw(::grpc::ClientContext* context, const ::social::FollowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::social::UnfollowReply>* AsyncUnfollowRaw(::grpc::ClientContext* context, const ::social::UnfollowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::social::UnfollowReply>* PrepareAsyncUnfollowRaw(::grpc::ClientContext* context, const ::social::UnfollowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::social::Post, ::social::PostReply>* TimelineRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::social::Post, ::social::PostReply>* AsyncTimelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::social::Post, ::social::PostReply>* PrepareAsyncTimelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::social::ListReply>* AsyncListRaw(::grpc::ClientContext* context, const ::social::ListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::social::ListReply>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::social::ListRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Follow(::grpc::ClientContext* context, const ::social::FollowRequest& request, ::social::FollowReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::social::FollowReply>> AsyncFollow(::grpc::ClientContext* context, const ::social::FollowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::social::FollowReply>>(AsyncFollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::social::FollowReply>> PrepareAsyncFollow(::grpc::ClientContext* context, const ::social::FollowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::social::FollowReply>>(PrepareAsyncFollowRaw(context, request, cq));
    }
    ::grpc::Status Unfollow(::grpc::ClientContext* context, const ::social::UnfollowRequest& request, ::social::UnfollowReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::social::UnfollowReply>> AsyncUnfollow(::grpc::ClientContext* context, const ::social::UnfollowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::social::UnfollowReply>>(AsyncUnfollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::social::UnfollowReply>> PrepareAsyncUnfollow(::grpc::ClientContext* context, const ::social::UnfollowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::social::UnfollowReply>>(PrepareAsyncUnfollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::social::Post, ::social::PostReply>> Timeline(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::social::Post, ::social::PostReply>>(TimelineRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::social::Post, ::social::PostReply>> AsyncTimeline(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::social::Post, ::social::PostReply>>(AsyncTimelineRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::social::Post, ::social::PostReply>> PrepareAsyncTimeline(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::social::Post, ::social::PostReply>>(PrepareAsyncTimelineRaw(context, cq));
    }
    ::grpc::Status List(::grpc::ClientContext* context, const ::social::ListRequest& request, ::social::ListReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::social::ListReply>> AsyncList(::grpc::ClientContext* context, const ::social::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::social::ListReply>>(AsyncListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::social::ListReply>> PrepareAsyncList(::grpc::ClientContext* context, const ::social::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::social::ListReply>>(PrepareAsyncListRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::social::FollowReply>* AsyncFollowRaw(::grpc::ClientContext* context, const ::social::FollowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::social::FollowReply>* PrepareAsyncFollowRaw(::grpc::ClientContext* context, const ::social::FollowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::social::UnfollowReply>* AsyncUnfollowRaw(::grpc::ClientContext* context, const ::social::UnfollowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::social::UnfollowReply>* PrepareAsyncUnfollowRaw(::grpc::ClientContext* context, const ::social::UnfollowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::social::Post, ::social::PostReply>* TimelineRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::social::Post, ::social::PostReply>* AsyncTimelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::social::Post, ::social::PostReply>* PrepareAsyncTimelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::social::ListReply>* AsyncListRaw(::grpc::ClientContext* context, const ::social::ListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::social::ListReply>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::social::ListRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Follow_;
    const ::grpc::internal::RpcMethod rpcmethod_Unfollow_;
    const ::grpc::internal::RpcMethod rpcmethod_Timeline_;
    const ::grpc::internal::RpcMethod rpcmethod_List_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Accepts a FollowRequest and returns a  Reply
    virtual ::grpc::Status Follow(::grpc::ServerContext* context, const ::social::FollowRequest* request, ::social::FollowReply* response);
    // Accepts a UnfollowRequest and returns a Reply
    virtual ::grpc::Status Unfollow(::grpc::ServerContext* context, const ::social::UnfollowRequest* request, ::social::UnfollowReply* response);
    // Bidirectional stream of posts and replies.
    virtual ::grpc::Status Timeline(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::social::PostReply, ::social::Post>* stream);
    virtual ::grpc::Status List(::grpc::ServerContext* context, const ::social::ListRequest* request, ::social::ListReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Follow() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Follow(::grpc::ServerContext* context, const ::social::FollowRequest* request, ::social::FollowReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFollow(::grpc::ServerContext* context, ::social::FollowRequest* request, ::grpc::ServerAsyncResponseWriter< ::social::FollowReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Unfollow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Unfollow() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Unfollow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unfollow(::grpc::ServerContext* context, const ::social::UnfollowRequest* request, ::social::UnfollowReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnfollow(::grpc::ServerContext* context, ::social::UnfollowRequest* request, ::grpc::ServerAsyncResponseWriter< ::social::UnfollowReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Timeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Timeline() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Timeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Timeline(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::social::PostReply, ::social::Post>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTimeline(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::social::PostReply, ::social::Post>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_List() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::social::ListRequest* request, ::social::ListReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::social::ListRequest* request, ::grpc::ServerAsyncResponseWriter< ::social::ListReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Follow<WithAsyncMethod_Unfollow<WithAsyncMethod_Timeline<WithAsyncMethod_List<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Follow() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Follow(::grpc::ServerContext* context, const ::social::FollowRequest* request, ::social::FollowReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Unfollow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Unfollow() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Unfollow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unfollow(::grpc::ServerContext* context, const ::social::UnfollowRequest* request, ::social::UnfollowReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Timeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Timeline() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Timeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Timeline(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::social::PostReply, ::social::Post>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_List() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::social::ListRequest* request, ::social::ListReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Follow() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::social::FollowRequest, ::social::FollowReply>(std::bind(&WithStreamedUnaryMethod_Follow<BaseClass>::StreamedFollow, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Follow(::grpc::ServerContext* context, const ::social::FollowRequest* request, ::social::FollowReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFollow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::social::FollowRequest,::social::FollowReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Unfollow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Unfollow() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::social::UnfollowRequest, ::social::UnfollowReply>(std::bind(&WithStreamedUnaryMethod_Unfollow<BaseClass>::StreamedUnfollow, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Unfollow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Unfollow(::grpc::ServerContext* context, const ::social::UnfollowRequest* request, ::social::UnfollowReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnfollow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::social::UnfollowRequest,::social::UnfollowReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_List() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::social::ListRequest, ::social::ListReply>(std::bind(&WithStreamedUnaryMethod_List<BaseClass>::StreamedList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::social::ListRequest* request, ::social::ListReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::social::ListRequest,::social::ListReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Follow<WithStreamedUnaryMethod_Unfollow<WithStreamedUnaryMethod_List<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Follow<WithStreamedUnaryMethod_Unfollow<WithStreamedUnaryMethod_List<Service > > > StreamedService;
};

}  // namespace social


#endif  // GRPC_social_2eproto__INCLUDED
