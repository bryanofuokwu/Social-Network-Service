// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: social.proto

#include "social.pb.h"
#include "social.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace social {

static const char* Social_method_names[] = {
  "/social.Social/Follow",
  "/social.Social/Unfollow",
  "/social.Social/Timeline",
  "/social.Social/List",
};

std::unique_ptr< Social::Stub> Social::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Social::Stub> stub(new Social::Stub(channel));
  return stub;
}

Social::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Follow_(Social_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Unfollow_(Social_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Timeline_(Social_method_names[2], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_List_(Social_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Social::Stub::Follow(::grpc::ClientContext* context, const ::social::FollowRequest& request, ::social::FollowReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Follow_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::social::FollowReply>* Social::Stub::AsyncFollowRaw(::grpc::ClientContext* context, const ::social::FollowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::social::FollowReply>::Create(channel_.get(), cq, rpcmethod_Follow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::social::FollowReply>* Social::Stub::PrepareAsyncFollowRaw(::grpc::ClientContext* context, const ::social::FollowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::social::FollowReply>::Create(channel_.get(), cq, rpcmethod_Follow_, context, request, false);
}

::grpc::Status Social::Stub::Unfollow(::grpc::ClientContext* context, const ::social::UnfollowRequest& request, ::social::UnfollowReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Unfollow_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::social::UnfollowReply>* Social::Stub::AsyncUnfollowRaw(::grpc::ClientContext* context, const ::social::UnfollowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::social::UnfollowReply>::Create(channel_.get(), cq, rpcmethod_Unfollow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::social::UnfollowReply>* Social::Stub::PrepareAsyncUnfollowRaw(::grpc::ClientContext* context, const ::social::UnfollowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::social::UnfollowReply>::Create(channel_.get(), cq, rpcmethod_Unfollow_, context, request, false);
}

::grpc::ClientReaderWriter< ::social::Post, ::social::PostReply>* Social::Stub::TimelineRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::social::Post, ::social::PostReply>::Create(channel_.get(), rpcmethod_Timeline_, context);
}

::grpc::ClientAsyncReaderWriter< ::social::Post, ::social::PostReply>* Social::Stub::AsyncTimelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::social::Post, ::social::PostReply>::Create(channel_.get(), cq, rpcmethod_Timeline_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::social::Post, ::social::PostReply>* Social::Stub::PrepareAsyncTimelineRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::social::Post, ::social::PostReply>::Create(channel_.get(), cq, rpcmethod_Timeline_, context, false, nullptr);
}

::grpc::Status Social::Stub::List(::grpc::ClientContext* context, const ::social::ListRequest& request, ::social::ListReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_List_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::social::ListReply>* Social::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::social::ListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::social::ListReply>::Create(channel_.get(), cq, rpcmethod_List_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::social::ListReply>* Social::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::social::ListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::social::ListReply>::Create(channel_.get(), cq, rpcmethod_List_, context, request, false);
}

Social::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Social_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Social::Service, ::social::FollowRequest, ::social::FollowReply>(
          std::mem_fn(&Social::Service::Follow), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Social_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Social::Service, ::social::UnfollowRequest, ::social::UnfollowReply>(
          std::mem_fn(&Social::Service::Unfollow), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Social_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Social::Service, ::social::Post, ::social::PostReply>(
          std::mem_fn(&Social::Service::Timeline), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Social_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Social::Service, ::social::ListRequest, ::social::ListReply>(
          std::mem_fn(&Social::Service::List), this)));
}

Social::Service::~Service() {
}

::grpc::Status Social::Service::Follow(::grpc::ServerContext* context, const ::social::FollowRequest* request, ::social::FollowReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Social::Service::Unfollow(::grpc::ServerContext* context, const ::social::UnfollowRequest* request, ::social::UnfollowReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Social::Service::Timeline(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::social::PostReply, ::social::Post>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Social::Service::List(::grpc::ServerContext* context, const ::social::ListRequest* request, ::social::ListReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace social

